#소수: 1과 자기 자신으로 나눌때만 나누어 떨어지는 자연수
n=int(input())
numbers=list(map(int, input().split()))
sosu=0

for num in numbers:
    for i in range(2, num+1): #2부터 num까지의 수 i에 대해 반복
        if num % i == 0:
            if num == i:
                sosu += 1
            break

print(sosu)

'''
좋습니다. 주어진 예시로서 numbers 리스트에 [3, 4, 7, 8, 9]가 들어갔을 때, 코드가 어떻게 동작하는지 하나씩 설명하겠습니다.

n = 5: n에는 5가 입력되었습니다. 이는 numbers 리스트에 포함된 숫자의 개수입니다.

numbers = [3, 4, 7, 8, 9]: numbers 리스트에는 주어진 예시의 숫자들이 들어갑니다.

sosu = 0: 소수의 개수를 나타내는 변수 sosu가 0으로 초기화됩니다.

for num in numbers:: 리스트 numbers에 있는 각 숫자에 대해 반복문이 실행됩니다. 아래는 각 숫자별로 수행되는 과정입니다.

숫자 3에 대한 처리 (num = 3):

for i in range(2, 4): 2부터 3까지의 수에 대해 반복문이 실행됩니다.
i = 2:
3 % 2 != 0: 3은 2로 나누어떨어지지 않습니다.
i = 3:
3 % 3 == 0: 3은 3으로 나누어집니다.
3 == 3: 소수이므로 sosu가 1 증가합니다.
반복문 종료 (break)
결과: sosu는 1로 업데이트됩니다.
숫자 4에 대한 처리 (num = 4):

for i in range(2, 5): 2부터 4까지의 수에 대해 반복문이 실행됩니다.
i = 2:
4 % 2 == 0: 4는 2로 나누어집니다.
반복문 종료 (break)
결과: 4는 소수가 아니므로 sosu는 변화하지 않습니다.
숫자 7에 대한 처리 (num = 7):

for i in range(2, 8): 2부터 7까지의 수에 대해 반복문이 실행됩니다.
i = 2:
7 % 2 != 0: 7은 2로 나누어떨어지지 않습니다.
i = 3:
7 % 3 != 0: 7은 3으로 나누어떨어지지 않습니다.
i = 4:
7 % 4 != 0: 7은 4로 나누어떨어지지 않습니다.
i = 5:
7 % 5 != 0: 7은 5로 나누어떨어지지 않습니다.
i = 6:
7 % 6 != 0: 7은 6으로 나누어떨어지지 않습니다.
i = 7:
7 % 7 == 0: 7은 7로 나누어집니다.
7 == 7: 소수이므로 sosu가 1 증가합니다.
반복문 종료 (break)
결과: sosu는 2로 업데이트됩니다.
숫자 8에 대한 처리 (num = 8):

for i in range(2, 9): 2부터 8까지의 수에 대해 반복문이 실행됩니다.
i = 2:
8 % 2 == 0: 8은 2로 나누어집니다.
반복문 종료 (break)
결과: 8은 소수가 아니므로 sosu는 변화하지 않습니다.
숫자 9에 대한 처리 (num = 9):

for i in range(2, 10): 2부터 9까지의 수에 대해 반복문이 실행됩니다.
i = 2:
9 % 2 != 0: 9는 2로 나누어떨어지지 않습니다.
i = 3:
9 % 3 == 0: 9는 3으로 나누어집니다.
9 == 3: 소수이므로 sosu가 1 증가합니다.
반복문 종료 (break)
결과: sosu는 3으로 업데이트됩니다.
print(sosu): 최종적으로 sosu의 값인 3이 출력됩니다.
'''